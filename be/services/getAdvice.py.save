import openai
import os
import csv
import json
import re
from dotenv import load_dotenv
from .getLawInfo import get_all_law_details_as_json

# .env 파일에서 API 키 불러오기
# load_dotenv('.env')
openai.api_key = os.getenv('OPENAI_KEY')


### --- CSV 관련 함수들 --- ###

def load_csv_data_by_name(filename, folder_path):
    file_path = os.path.join(folder_path, filename)
    try:
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            return list(csv.DictReader(f))
    except UnicodeDecodeError:
        with open(file_path, 'r', encoding='cp949') as f:
            return list(csv.DictReader(f))


def extract_law_info_from_text(text):
    # 예: "근로기준법 제50조", "가사근로자법 제28조"
    match = re.match(r"(.+?)\s*제\s*(\d+[조항]*)", text)
    if match:
        return match.group(1).strip(), match.group(2).strip()
    return None, None


def match_laws_with_csv(gpt_law_list, law_content_csv, law_meta_csv):
    matched_laws = []

    for entry in gpt_law_list:
        law_name, article = extract_law_info_from_text(entry)
        if not law_name or not article:
            continue

        # 1. 조문 내용 찾기
        matched_content = next(
            (row for row in law_content_csv
             if law_name.replace(" ", "") in row.get("법령명", "").replace(" ", "")
             and article in row.get("조문명", "")),
            None
        )

        # 2. 메타 정보 찾기
        matched_meta = next(
            (row for row in law_meta_csv
             if law_name.replace(" ", "") in row.get("법령명", "").replace(" ", "")),
            None
        )

        matched_laws.append({
            "법령명": matched_meta.get("법령명") if matched_meta else law_name,
            "조항": article,
            "공포번호": matched_meta.get("공포번호", "미확인") if matched_meta else "미확인",
            "시행일자": matched_meta.get("시행일자", "미확인") if matched_meta else "미확인",
            "법령내용": matched_content.get("조문명", "해당 조문을 찾을 수 없습니다.") if matched_content else "해당 조문을 찾을 수 없습니다."
        })

    return matched_laws


### --- GPT 계약서 분석 --- ###

def analyze_contract(contract_text):
    prompt = f"""
    이 계약서 내용을 아래 항목에 따라 분석해 주세요:

    1. **계약서 필수 기재사항 누락 여부 확인**
    2. **대한민국 근로기준법 및 관련 법령과의 관련성 및 위반 여부 판단**
    3. **위반이 있다면 구체적인 위반 내용과 해당 법령 조항 명시**
    4. **계약서 내용과 관련 있는 모든 법령 조항 명시 (위반 여부와 상관 없이)** 
    5. **임금 구조의 적절성 판단**
    6. **사회보험 적용 여부의 적절성**
    7. **기타 유의사항 및 계약서에서 잘못 해석될 수 있는 부분 설명**
    8. **근로자에게 불리하게 작용할 수 있는 조항이 있는 경우 설명**
    9. **총평 및 권고사항**

    출력 형식은 아래 JSON만 사용하세요. 다른 텍스트는 포함하지 마세요.

    ```json
    {{
      "필수사항누락": ["항목1", "항목2", ...],
      "위반여부": "예" 또는 "아니오",
      "위반세부사항": ["설명1", "설명2", ...],
      "관련법조항": ["근로기준법 제00조", "최저임금법 제0조", ...],
      "법령내용": ["조항 내용1", "조항 내용2", ...],
      "임금구조평가": "간단 요약 또는 문제점",
      "사회보험평가": "간단 요약 또는 문제점",
     "기타유의사항": ["설명1", "설명2", ...],
      "총평": "전반적인 평가와 권고사항"
    }}
    """

### --- 1차 계약서 분석: csv 파일 참고해서 결과 출력 --- ###

def get_analysis_with_law_matching(contract_file_path, csv_folder_path):
    # 1. 계약서 불러오기
    with open(contract_file_path, 'r', encoding='utf-8') as file:
        contract_text = file.read()

    # 2. GPT 분석 실행
    gpt_result = analyze_contract(contract_text)

    # 3. GPT가 추정한 법령조항 리스트
    gpt_laws = gpt_result.get("관련법조항", [])

    # 4. CSV 각각 로드
    law_content_csv = load_csv_data_by_name("고용노동부_고용노동관련 법령 내용_20250227.csv", csv_folder_path)
    law_meta_csv = load_csv_data_by_name("고용노동부_고용노동관련 법령_20250227.csv", csv_folder_path)

    # 5. GPT 결과를 CSV 기준으로 보정
    matched_laws = match_laws_with_csv(gpt_laws, law_content_csv, law_meta_csv)

    # 6. 결과 JSON에 반영
    gpt_result["관련법조항"] = matched_laws

    return gpt_result


def get_final_contract_analysis(result, result2):
    """
    계약서 분석 결과(result)와 관련 법령 상세 내용(result2)을 바탕으로
    GPT에게 보강된 분석을 요청하는 함수

    Args:
        result (dict): GPT의 1차 분석 결과 (JSON 디코딩된 딕셔너리)
        result2 (str): 관련 법령 상세 내용 (JSON 형식의 문자열)

    Returns:
        dict: 보강된 분석 결과 JSON 또는 오류 메시지
    """
    prompt = f"""
    다음은 GPT가 근로계약서를 1차 분석한 결과(result)와 관련 법령의 상세 조문 내용(result2)입니다. 이 두 데이터를 바탕으로 계약서에 대한 보다 정밀한 분석을 다시 수행해 주세요.

    법령 조항별로 다음 항목을 묶어서 제시해 주세요:
    - "법령명"
    - "관련법조항"
    - "공포번호"
    - "시행일자"
    - "조문내용": "근로기준법 제17조: ... 와 같은 형식으로 요약"
    - "위반여부": "예" 또는 "아니오"
    - "위반사항및법적해석": 위반된 경우 위반 사유와 해석
    - "상세분석": 법령과 계약서의 연결 및 위반 판단에 대한 상세 설명

    그 다음으로는 다음 항목들을 계약서 전체 기준으로 종합하여 작성해 주세요:
    - "필수사항누락": ["항목1", "항목2", ...]
    - "임금구조평가": "간단 요약 또는 문제점"
    - "사회보험평가": "간단 요약 또는 문제점"
    - "기타유의사항": ["설명1", "설명2", ...]
    - "총평": "전반적인 평가와 권고사항"

    출력 형식은 아래 JSON만 사용하세요. 다른 텍스트는 포함하지 마세요.
    다음은 원래 분석 결과(result)입니다: {json.dumps(result, ensure_ascii=False, indent=2)}
    다음은 각 관련 조항의 상세 내용(result2)입니다: {result2}

    ```json
    {{
        "법령분석": [
        {{
        "법령명": "근로기준법",
        "조항": "17조",
        "공포번호": "제20520호",
        "시행일자": "2025-02-23",
        "조문내용": "근로기준법 제17조: 근로계약서에 임금, 소정근로시간, 휴일, 연차유급휴가 등을 명시해야 함.",
        "위반여부": "예",
        "위반사항및법적해석": "근로기준법 제17조 위반: 주휴수당 금액 및 기타급여(제수당 등)가 명시되지 않음.",
        "상세분석": "근로기준법 제17조에 따라 근로계약서에는 임금의 구성항목, 계산방법, 지급방법 등이 명시되어야 하나, 주휴수당 및 기타급여가 명시되지 않아 위반됨."
        }},
        ...
        ],
        "필수사항누락": ["항목1", "항목2", ...],
        "임금구조평가": "요약 내용",
        "사회보험평가": "요약 내용",
        "기타유의사항": ["내용1", "내용2", ...],
        "총평": "전반적 평가 및 권고사항"
        }}
        """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "당신은 대한민국 노동법에 정통한 계약서 분석 전문가입니다."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=3000
        )
        result_text = response["choices"][0]["message"]["content"]

        # JSON 부분만 추출
        if result_text.startswith("```json"):
            result_text = re.sub(r"```json\s*|\s*```", "", result_text, flags=re.DOTALL).strip()

            return json.loads(result_text)

    except json.JSONDecodeError:
        return {"error": "GPT 응답이 JSON 형식이 아닙니다.", "raw_output": result_text}
    except Exception as e:
        return {"error": str(e)}


### --- 2차 계약서 분석: CSV 파일 참고된 결과 + 법령api를 사용해서 얻은 결과 --- ###
def get_openai_response(contract_file_path, csv_folder_path):
    # 1차 계약서 분석: CSV 파일 참고된 결과
    print("1차 계약서 분석 시작")
    result = get_analysis_with_law_matching(contract_file_path, csv_folder_path)
    print("1차 계약서 분석 완료")

    # 2차 계약서 분석: 법령 API를 사용해서 얻은 결과
    print("법령 API를 사용한 2차 계약서 분석 시작")
    result2 = get_all_law_details_as_json(result)
    print("법령 API를 사용한 2차 계약서 분석 완료")

    # 최종 결과
    print("최종 계약서 분석 결과 생성 시작")
    final_result = get_final_contract_analysis(result, result2)
    print("최종 계약서 분석 결과 생성 완료")

    return final_result

def get_openai_response_from_text(text, csv_folder_path):
    """
    OCR 결과 텍스트를 바로 분석하는 함수 (파일 저장 없이 처리)
    """
    print("OCR 텍스트 기반 1차 분석 시작")
    result = analyze_contract(text)

    print("OCR 텍스트 기반 법령 상세 추출 시작")
    result2 = get_all_law_details_as_json(result)

    print("최종 분석 결과 생성 시작")
    final_result = get_final_contract_analysis(result, result2)
    print("최종 분석 결과 생성 완료")

    return final_result


##########################
# 다른 파일에서의 사용 예시 #
##########################
'''
from services.getAdvice import get_analysis_with_law_matching
import os
import pprint

# 상대 경로를 기준으로 경로 지정
contract_file_path = os.path.join("uploads", "img.png_ocr.txt")  # 상대경로
csv_folder_path = os.path.join("fineTuningFiles")  # 상대경로

result = get_analysis_with_law_matching(
    contract_file_path = os.path.join("uploads", "img.png_ocr.txt"),  # 상대경로
    csv_folder_path = os.path.join("fineTuningFiles")  # 상대경로
)

# 결과 출력

pprint.pprint(result)
'''

